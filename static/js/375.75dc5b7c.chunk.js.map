{"version":3,"file":"static/js/375.75dc5b7c.chunk.js","mappings":"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","sources":["pages/LoginPage/schema.ts","pages/RegisterPage/RegisterPage.tsx","utils/firebase.ts"],"sourcesContent":["import * as yup from 'yup';\r\n\r\nexport const schema = yup.object({\r\n  email: yup\r\n    .string()\r\n    .email('⚠ Invalid email')\r\n    .required('⚠ This field is required'),\r\n  password: yup\r\n    .string()\r\n    .required('⚠ This field is required')\r\n    .min(8, '⚠ Min length - 8 chars'),\r\n});\r\n","import { useState } from \"react\";\r\nimport { Link, Navigate } from \"react-router-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { createUserWithEmailAndPassword, UserCredential } from \"firebase/auth\";\r\n\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { LoadingButton } from \"@mui/lab\";\r\n\r\nimport { setAuthData } from \"../../store/auth/authSlice\";\r\nimport { useAppDispatch, useAppSelector } from \"../../hooks/redux-hooks\";\r\nimport { schema } from \"../LoginPage/schema\";\r\nimport { auth } from \"../../utils/firebase\";\r\n\r\nimport backgroundImg from \"../../assets/register.jpg\";\r\n\r\ninterface IFormInputs {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport default function RegisterPage() {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string>(\"\");\r\n\r\n  const token = useAppSelector((state) => state.auth.token);\r\n\r\n  const signUp = async (email: string, password: string) => {\r\n    try {\r\n      const { user }: UserCredential = await createUserWithEmailAndPassword(\r\n        auth,\r\n        email,\r\n        password\r\n      );\r\n      const userToken = user.refreshToken;\r\n      const userEmail = user.email;\r\n      dispatch(setAuthData({ userToken, userEmail }));\r\n    } catch (error) {\r\n      if (error instanceof Error) {\r\n        const errorMessage = error.message.slice(10);\r\n        setError(`⚠ ${errorMessage}`);\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm<IFormInputs>({ resolver: yupResolver(schema) });\r\n\r\n  const onSubmit = (data: IFormInputs) => {\r\n    setError(\"\");\r\n    setLoading(true);\r\n    signUp(data.email, data.password);\r\n  };\r\n\r\n  if (token) {\r\n    return <Navigate to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Grid container component=\"main\" sx={{ height: \"calc(100vh - 108px)\" }}>\r\n      <Grid\r\n        item\r\n        xs={false}\r\n        sm={4}\r\n        md={7}\r\n        sx={{\r\n          backgroundImage: `url(${backgroundImg})`,\r\n          backgroundRepeat: \"no-repeat\",\r\n          backgroundSize: \"cover\",\r\n          backgroundPosition: \"center\",\r\n        }}\r\n      />\r\n      <Grid item xs={12} sm={8} md={5}>\r\n        <Box\r\n          sx={{\r\n            my: 10,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n          }}>\r\n          <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n            <LockOutlinedIcon />\r\n          </Avatar>\r\n          <Typography component=\"h1\" variant=\"h5\">\r\n            Sign Up\r\n          </Typography>\r\n          <Box\r\n            component=\"form\"\r\n            noValidate\r\n            onSubmit={handleSubmit(onSubmit)}\r\n            sx={{ mt: 1, width: \"270px\" }}>\r\n            <TextField\r\n              id=\"email\"\r\n              {...register(\"email\")}\r\n              margin=\"normal\"\r\n              fullWidth\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: \"red\", fontSize: 14, margin: \"5px 0\" }}>\r\n              {errors.email?.message ? errors.email?.message : \" \"}\r\n            </Typography>\r\n\r\n            <TextField\r\n              id=\"password\"\r\n              {...register(\"password\")}\r\n              fullWidth\r\n              margin=\"normal\"\r\n              name=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              autoComplete=\"new-password\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: \"red\", fontSize: 14, margin: \"5px 0\" }}>\r\n              {errors.password?.message ? errors.password?.message : \" \"}\r\n            </Typography>\r\n\r\n            <FormControlLabel\r\n              control={<Checkbox value=\"allowExtraEmails\" color=\"primary\" />}\r\n              label=\"Promo\"\r\n            />\r\n            <Typography\r\n              component=\"p\"\r\n              sx={{ color: \"red\", fontSize: 14, margin: \"2px 0\" }}>\r\n              {error || \"\"}\r\n            </Typography>\r\n            <LoadingButton\r\n              type=\"submit\"\r\n              loading={loading}\r\n              loadingIndicator=\"Loading…\"\r\n              fullWidth\r\n              variant=\"contained\"\r\n              sx={{ mt: 3, mb: 2 }}>\r\n              <span>Sign Up</span>\r\n            </LoadingButton>\r\n            <Grid container justifyContent=\"center\">\r\n              <Grid item>\r\n                <Link to=\"/login\">Already Registered? Sign In!</Link>\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n        </Box>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC_lE0668hwlYXylLiPMPNLaXMvLYEaKTw\",\r\n  authDomain: \"alterego-test.firebaseapp.com\",\r\n  projectId: \"alterego-test\",\r\n  storageBucket: \"alterego-test.appspot.com\",\r\n  messagingSenderId: \"373581046067\",\r\n  appId: \"1:373581046067:web:6bf2251b42e6a36bd7de46\",\r\n};\r\n\r\nconst firebaseSetup = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth(firebaseSetup);\r\nexport default firebaseSetup;\r\n"],"names":["schema","yup","email","required","password","min","RegisterPage","_errors$email","_errors$email2","_errors$password","_errors$password2","dispatch","useAppDispatch","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","error","setError","token","useAppSelector","state","auth","signUp","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$createUserWith","user","userToken","userEmail","errorMessage","wrap","_context","prev","next","createUserWithEmailAndPassword","sent","refreshToken","setAuthData","t0","Error","message","slice","concat","finish","stop","_x","_x2","apply","arguments","_useForm","useForm","resolver","yupResolver","register","handleSubmit","errors","formState","_jsx","Navigate","to","_jsxs","Grid","container","component","sx","height","children","item","xs","sm","md","backgroundImage","backgroundImg","backgroundRepeat","backgroundSize","backgroundPosition","Box","my","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","noValidate","onSubmit","data","mt","width","TextField","_objectSpread","id","margin","fullWidth","label","name","autoComplete","color","fontSize","type","FormControlLabel","control","Checkbox","value","LoadingButton","loadingIndicator","mb","justifyContent","Link","firebaseSetup","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","getAuth"],"sourceRoot":""}